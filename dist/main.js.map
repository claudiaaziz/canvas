{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/canvas.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class Canvas {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupDrawingEventListeners();\n    this.setupBrushSize();\n    this.setupColorHandling();\n    this.setupUndoBtn();\n    this.setupRedoBtn();\n    this.setupClearBtn();\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupDrawingEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  setupBrushSize() {\n    this.brushSizeInput = document.getElementById(\"size-slider\");\n    this.brushSizeInput.addEventListener(\"input\", () => this.updateBrushSize());\n    this.currentBrushSize = 5;\n  }\n\n  setupColorHandling() {\n    // if a brush color has been selected..\n    this.colorBtns = document.querySelectorAll(\".color-btn\");\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n\n    this.colorBtns.forEach((colorbtn) => {\n      colorbtn.addEventListener(\"click\", () => {\n        this.currentColor = colorbtn.style.backgroundColor;\n      });\n    });\n\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => (this.canvas.style.backgroundColor = this.bgColorPicker.value)\n    );\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  // // drawing actions\n  startDrawing(e) {\n    if (!this.isDrawing) {\n      // clear the stacks when a new drawing begins\n      this.currentPath = [];\n      this.redoStack = [];\n      this.isDrawing = true;\n    }\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvas.offsetTop;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.ctx.beginPath();\n\n    // move the brush to the adjusted mouse coordinates\n    this.ctx.moveTo(canvasMouseX, canvasMouseY);\n\n    // store the starting point in the drawing path\n    this.currentPath.push({\n      x: canvasMouseX,\n      y: canvasMouseY,\n      color: this.currentColor,\n      brushSize: this.currentBrushSize,\n    });\n\n    // draw a dot at the starting point\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.ctx.lineTo(mouseX, mouseY);\n\n    this.setBrushStyling();\n\n    // draw the line on the canvas\n    this.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({\n      x: mouseX,\n      y: mouseY,\n      color: this.currentColor,\n      brushSize: this.currentBrushSize,\n    });\n  }\n\n  stopDrawing() {\n    if (this.isDrawing) {\n      this.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n      this.isDrawing = false;\n    }\n  }\n\n  setBrushStyling(\n    color = this.currentColor,\n    brushSize = this.currentBrushSize\n  ) {\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineWidth = brushSize;\n    this.ctx.strokeStyle = color;\n  }\n\n  updateBrushSize() {\n    this.currentBrushSize = parseInt(this.brushSizeInput.value);\n    this.setBrushStyling();\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path, isUndo = true) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n\n        // set brush styling color based on whether it's an undo or not\n        this.setBrushStyling(\n          isUndo ? point.color : this.currentColor,\n          point.brushSize\n        );\n\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.redoStack.pop();\n\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default Canvas;\n","import Canvas from \"./scripts/canvas\";\nimport Brush from \"./scripts/brush\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Canvas();\n});\n\n\n"],"names":["constructor","this","setupCanvas","setupCanvasProportions","setupDrawingEventListeners","setupBrushSize","setupColorHandling","setupUndoBtn","setupRedoBtn","setupClearBtn","canvas","document","getElementById","ctx","getContext","isDrawing","style","position","top","topMargin","height","window","innerHeight","width","innerWidth","addEventListener","e","startDrawing","draw","stopDrawing","brushSizeInput","updateBrushSize","currentBrushSize","colorBtns","querySelectorAll","brushColorPicker","forEach","colorbtn","currentColor","backgroundColor","value","bgColorPicker","drawnPaths","undoBtn","undo","redoStack","redoBtn","redo","clearBtn","clear","currentPath","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","beginPath","moveTo","push","x","y","color","brushSize","mouseX","mouseY","lineTo","setBrushStyling","stroke","arguments","length","undefined","lineCap","lineWidth","strokeStyle","parseInt","clearRect","undonePath","pop","path","redrawPath","isUndo","point","idx","redonePath","Canvas"],"sourceRoot":""}