{"version":3,"file":"main.js","mappings":"6BAgEA,IAhEA,MACEA,WAAAA,GACEC,KAAKC,OAASC,SAASC,eAAe,UACtCH,KAAKI,aAAeF,SAASG,iBAAiB,gBAC9CL,KAAKM,WAAaJ,SAASK,cAAc,qBAEzCP,KAAKQ,cACLR,KAAKS,IAAMT,KAAKC,OAAOS,WAAW,MAClCV,KAAKW,WAAY,EAEjBX,KAAKC,OAAOW,iBAAiB,YAAaZ,KAAKa,aAAaC,KAAKd,OACjEA,KAAKC,OAAOW,iBAAiB,YAAaZ,KAAKe,KAAKD,KAAKd,OACzDA,KAAKC,OAAOW,iBAAiB,UAAWZ,KAAKgB,YAAYF,KAAKd,OAC9DA,KAAKC,OAAOW,iBAAiB,WAAYZ,KAAKgB,YAAYF,KAAKd,OAE/DA,KAAKI,aAAaa,SAASC,IACzBA,EAAON,iBAAiB,SAAS,KAC/BZ,KAAKmB,aAAeD,EAAOE,MAAMC,eAAe,GAChD,IAGJrB,KAAKM,WAAWM,iBAAiB,SAAUU,IACzCtB,KAAKmB,aAAeG,EAAEC,OAAOC,KAAK,GAEtC,CAEAhB,WAAAA,GAIER,KAAKC,OAAOmB,MAAMK,SAAW,WAC7BzB,KAAKC,OAAOmB,MAAMM,IAAMC,QAExB3B,KAAKC,OAAO2B,OAASC,OAAOC,YANV,IACG,IAMrB9B,KAAKC,OAAO8B,MAAQF,OAAOG,UAC7B,CAEAnB,YAAAA,CAAaS,GACXtB,KAAKW,WAAY,EACjBX,KAAKS,IAAIwB,YACTjC,KAAKS,IAAIyB,OACPZ,EAAEa,QAAUnC,KAAKC,OAAOmC,WACxBd,EAAEe,QAAUrC,KAAKC,OAAOqC,WAE1BtC,KAAKe,KAAKO,EACZ,CAEAP,IAAAA,CAAKO,GACEtB,KAAKW,YACVX,KAAKS,IAAI8B,OAAOjB,EAAEa,QAAUnC,KAAKC,OAAOmC,WAAWd,EAAEe,QAAUrC,KAAKC,OAAOqC,WAE3EtC,KAAKS,IAAI+B,SACTxC,KAAKS,IAAIgC,YAAczC,KAAKmB,aAC9B,CAEAH,WAAAA,GACEhB,KAAKW,WAAY,CACnB,GCvDFT,SAASU,iBAAiB,oBAAoB,KAC5C,IAAI8B,CAAQ,G","sources":["webpack://canvas-project/./src/scripts/canvas.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class Canvas {\n  constructor() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.colorButtons = document.querySelectorAll(\".colorButton\");\n    this.colorInput = document.querySelector(\"input[type=color]\")\n\n    this.setupCanvas();\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n\n    this.canvas.addEventListener(\"mousedown\", this.startDrawing.bind(this));\n    this.canvas.addEventListener(\"mousemove\", this.draw.bind(this));\n    this.canvas.addEventListener(\"mouseup\", this.stopDrawing.bind(this));\n    this.canvas.addEventListener(\"mouseout\", this.stopDrawing.bind(this));\n\n    this.colorButtons.forEach((button) => {\n      button.addEventListener(\"click\", () => {\n        this.currentColor = button.style.backgroundColor;\n      });\n    });\n\n    this.colorInput.addEventListener(\"input\", (e) => {\n      this.currentColor = e.target.value\n    })\n  }\n\n  setupCanvas() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  startDrawing(e) {\n    this.isDrawing = true;\n    this.ctx.beginPath();\n    this.ctx.moveTo(\n      e.clientX - this.canvas.offsetLeft,\n      e.clientY - this.canvas.offsetTop\n    );\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n    this.ctx.lineTo(e.clientX - this.canvas.offsetLeft,e.clientY - this.canvas.offsetTop\n    );\n    this.ctx.stroke();\n    this.ctx.strokeStyle = this.currentColor; \n  }\n\n  stopDrawing() {\n    this.isDrawing = false;\n  }\n\n  // clear() {\n\n  // }\n}\n\nexport default Canvas;\n","import Canvas from \"./scripts/canvas\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Canvas();\n});\n\n\n"],"names":["constructor","this","canvas","document","getElementById","colorButtons","querySelectorAll","colorInput","querySelector","setupCanvas","ctx","getContext","isDrawing","addEventListener","startDrawing","bind","draw","stopDrawing","forEach","button","currentColor","style","backgroundColor","e","target","value","position","top","topMargin","height","window","innerHeight","width","innerWidth","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","lineTo","stroke","strokeStyle","Canvas"],"sourceRoot":""}