{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/canvas.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class Canvas {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupDrawingEventListeners();\n    this.setupBrushSize();\n    this.setupColorHandling();\n    this.setupEraser();\n    this.setupUndoBtn();\n    this.setupRedoBtn();\n    this.setupClearBtn();\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupDrawingEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  setupBrushSize() {\n    this.brushSizeInput = document.getElementById(\"size-slider\");\n    this.brushSizeInput.addEventListener(\"input\", () => this.updateBrushSize());\n    this.currentBrushSize = 5;\n  }\n\n  setupColorHandling() {\n    this.currentColor = \"black\";\n\n    // if a brush color has been selected..\n    this.colorBtns = document.querySelectorAll(\".color-btn\");\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n\n    this.colorBtns.forEach((colorbtn) => {\n      colorbtn.addEventListener(\"click\", () => {\n        this.currentColor = colorbtn.style.backgroundColor;\n      });\n    });\n\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => (this.canvas.style.backgroundColor = this.bgColorPicker.value)\n    );\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  setupEraser() {\n    this.eraserCheckbox = document.getElementById(\"eraser\");\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  // // drawing actions\n  startDrawing(e) {\n    if (!this.isDrawing) {\n      // clear the stacks when a new drawing begins\n      this.currentPath = [];\n      this.redoStack = [];\n      this.isDrawing = true;\n    }\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvas.offsetTop;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.ctx.beginPath();\n\n    // move the brush to the adjusted mouse coordinates\n    this.ctx.moveTo(canvasMouseX, canvasMouseY);\n\n    // store the starting point in the drawing path\n    this.currentPath.push({\n      x: canvasMouseX,\n      y: canvasMouseY,\n      color: this.currentColor,\n      brushSize: this.currentBrushSize,\n    });\n\n    // draw a dot at the starting point\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.ctx.lineTo(mouseX, mouseY);\n\n    // Set brush styling based on whether eraser or brush is checked\n    const color = this.eraserCheckbox.checked\n      ? this.bgColorPicker.value\n      : this.currentColor;\n\n    this.setBrushStyling(color, this.currentBrushSize);\n\n    // draw the line on the canvas\n    this.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({\n      x: mouseX,\n      y: mouseY,\n      color: color,\n      brushSize: this.currentBrushSize,\n    });\n  }\n\n  stopDrawing() {\n    if (this.isDrawing) {\n      this.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n      this.isDrawing = false;\n    }\n  }\n\n  setBrushStyling(\n    color = this.currentColor,\n    brushSize = this.currentBrushSize\n  ) {\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineWidth = brushSize;\n    this.ctx.strokeStyle = color;\n  }\n\n  updateBrushSize() {\n    this.currentBrushSize = parseInt(this.brushSizeInput.value);\n    this.setBrushStyling();\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n\n        // set brush styling based on point clr & brush size\n        this.setBrushStyling(point.color, point.brushSize);\n\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.redoStack.pop();\n\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default Canvas;\n","import Canvas from \"./scripts/canvas\";\nimport Brush from \"./scripts/brush\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Canvas();\n});\n\n\n"],"names":["constructor","this","setupCanvas","setupCanvasProportions","setupDrawingEventListeners","setupBrushSize","setupColorHandling","setupEraser","setupUndoBtn","setupRedoBtn","setupClearBtn","canvas","document","getElementById","ctx","getContext","isDrawing","style","position","top","topMargin","height","window","innerHeight","width","innerWidth","addEventListener","e","startDrawing","draw","stopDrawing","brushSizeInput","updateBrushSize","currentBrushSize","currentColor","colorBtns","querySelectorAll","brushColorPicker","forEach","colorbtn","backgroundColor","value","bgColorPicker","clearBtn","clear","eraserCheckbox","drawnPaths","undoBtn","undo","redoStack","redoBtn","redo","currentPath","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","beginPath","moveTo","push","x","y","color","brushSize","mouseX","mouseY","lineTo","checked","setBrushStyling","stroke","arguments","length","undefined","lineCap","lineWidth","strokeStyle","parseInt","clearRect","undonePath","pop","path","redrawPath","point","idx","redonePath","Canvas"],"sourceRoot":""}