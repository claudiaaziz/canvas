{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/colorHandler.js","webpack://canvas-project/./src/scripts/canvas.js","webpack://canvas-project/./src/scripts/toolIcon.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class ColorHandler {\n  constructor(canvasHandler) {\n    this.setupColorHandling()\n    this.canvasHandler = canvasHandler\n  }\n\n  setupColorHandling() {\n    this.currentColor = \"black\";\n\n    // if a brush color has been selected..\n    this.colorBtns = document.querySelectorAll(\".color-btn\");\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n\n    this.colorBtns.forEach((colorbtn) => {\n      colorbtn.addEventListener(\"click\", () => {\n        this.currentColor = colorbtn.style.backgroundColor;\n      });\n    });\n\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => {\n        const drawnPaths = this.canvasHandler.drawnPaths\n        this.canvasHandler.clear()\n        drawnPaths.forEach((path) => this.canvasHandler.redrawPath(path));\n        this.canvasHandler.canvas.style.backgroundColor = this.bgColorPicker.value;\n      }\n    );\n  }\n}\n\nexport default ColorHandler","import ColorHandler from \"./colorHandler\"; \n\nclass Canvas {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupDrawingEventListeners();\n    this.setupBrushSize();\n    this.setupEraser();\n    this.setupUndoBtn();\n    this.setupRedoBtn();\n    this.setupClearBtn();\n\n    this.colorHandler = new ColorHandler(this)\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupDrawingEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  setupBrushSize() {\n    this.brushSizeInput = document.getElementById(\"size-slider\");\n    this.brushSizeInput.addEventListener(\"input\", () => this.updateBrushSize());\n    this.currentBrushSize = 5;\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  setupEraser() {\n    this.eraserCheckbox = document.getElementById(\"eraser\");\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  // // drawing actions\n  startDrawing(e) {\n    if (!this.isDrawing) {\n      // clear the stacks when a new drawing begins\n      this.currentPath = [];\n      this.redoStack = [];\n      this.isDrawing = true;\n    }\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvas.offsetTop;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.ctx.beginPath();\n\n    // move the brush to the adjusted mouse coordinates\n    this.ctx.moveTo(canvasMouseX, canvasMouseY);\n\n    // store the starting point in the drawing path\n    this.currentPath.push({\n      x: canvasMouseX,\n      y: canvasMouseY,\n      color: this.currentColor,\n      brushSize: this.currentBrushSize,\n    });\n\n    // draw a dot at the starting point\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.ctx.lineTo(mouseX, mouseY);\n\n    // Set brush styling based on whether eraser or brush is checked\n    const color = this.eraserCheckbox.checked\n      ? this.colorHandler.bgColorPicker.value\n      : this.colorHandler.currentColor;\n\n    this.setBrushStyling(color, this.currentBrushSize);\n\n    // draw the line on the canvas\n    this.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({\n      x: mouseX,\n      y: mouseY,\n      color: color,\n      brushSize: this.currentBrushSize,\n    });\n  }\n\n  stopDrawing() {\n    if (this.eraserCheckbox.checked) this.currentPath.isErase = true\n      if (this.isDrawing) {\n        this.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n        this.isDrawing = false;\n      }\n  }\n\n  setBrushStyling(\n    color = this.currentColor,\n    brushSize = this.currentBrushSize\n  ) {\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineWidth = brushSize;\n    this.ctx.strokeStyle = color;\n  }\n\n  updateBrushSize() {\n    this.currentBrushSize = parseInt(this.brushSizeInput.value);\n    this.setBrushStyling();\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n\n        // set brush styling based on point clr & brush size\n        if (path.isErase) point.color = this.colorHandler.bgColorPicker.value\n        this.setBrushStyling(point.color, point.brushSize);\n\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.redoStack.pop();\n\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default Canvas;\n","class ToolIcon {\n  constructor() {\n    this.brushRadio = document.getElementById(\"brush\");\n    this.eraserRadio = document.getElementById(\"eraser\");\n    this.brushLabel = document.querySelector('label[for=\"brush\"]');\n    this.eraserLabel = document.querySelector('label[for=\"eraser\"]');\n    this.detectChange();\n    this.updateIcon();\n  }\n\n  updateIcon() {\n    // update brush icon based on whether the brush is checked\n    this.brushLabel.querySelector(\"img\").src = this.brushRadio.checked\n      ? \"assets/tab-icon.png\"\n      : \"assets/menu icons/not-active-brush.png\";\n\n    // update eraser icon based on whether the eraser is checked\n    this.eraserLabel.querySelector(\"img\").src = this.eraserRadio.checked\n      ? \"assets/menu icons/active-eraser.png\"\n      : \"assets/menu icons/not-active-eraser.png\";\n  }\n\n  detectChange() {\n    // update icon clr when tool is changed\n    [this.brushRadio, this.eraserRadio].forEach((radio) => {\n      radio.addEventListener(\"change\", () => this.updateIcon());\n    });\n  }\n}\n\nexport default ToolIcon;\n","import Canvas from \"./scripts/canvas\";\nimport ToolIcon from \"./scripts/toolIcon\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Canvas();\n  new ToolIcon();\n});\n\n"],"names":["constructor","canvasHandler","this","setupColorHandling","currentColor","colorBtns","document","querySelectorAll","brushColorPicker","getElementById","forEach","colorbtn","addEventListener","style","backgroundColor","value","bgColorPicker","drawnPaths","clear","path","redrawPath","canvas","setupCanvas","setupCanvasProportions","setupDrawingEventListeners","setupBrushSize","setupEraser","setupUndoBtn","setupRedoBtn","setupClearBtn","colorHandler","ColorHandler","ctx","getContext","isDrawing","position","top","topMargin","height","window","innerHeight","width","innerWidth","e","startDrawing","draw","stopDrawing","brushSizeInput","updateBrushSize","currentBrushSize","clearBtn","eraserCheckbox","undoBtn","undo","redoStack","redoBtn","redo","currentPath","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","beginPath","moveTo","push","x","y","color","brushSize","mouseX","mouseY","lineTo","checked","setBrushStyling","stroke","isErase","arguments","length","undefined","lineCap","lineWidth","strokeStyle","parseInt","clearRect","undonePath","pop","point","idx","redonePath","brushRadio","eraserRadio","brushLabel","querySelector","eraserLabel","detectChange","updateIcon","src","radio","Canvas","ToolIcon"],"sourceRoot":""}