{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/brushHandler.js","webpack://canvas-project/./src/scripts/colorHandler.js","webpack://canvas-project/./src/scripts/drawingHandler.js","webpack://canvas-project/./src/scripts/canvasHandler.js","webpack://canvas-project/./src/scripts/toolIcon.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class BrushHandler {\n  constructor(canvasHandler, colorHandler) {\n    this.canvasHandler = canvasHandler;\n    this.colorHandler = colorHandler;\n    this.setupBrushSize();\n  }\n\n  setupBrushSize() {\n    this.brushSizeInput = document.getElementById(\"size-slider\");\n    this.brushSizeInput.addEventListener(\"input\", () => this.updateBrushSize());\n    this.currentBrushSize = 5;\n  }\n\n  setBrushStyling(\n    color = this.colorHandler.currentColor,\n    brushSize = this.currentBrushSize\n  ) {\n    this.canvasHandler.ctx.lineCap = \"round\";\n    this.canvasHandler.ctx.lineWidth = brushSize;\n    this.canvasHandler.ctx.strokeStyle = color;\n  }\n\n  updateBrushSize() {\n    this.currentBrushSize = parseInt(this.brushSizeInput.value);\n    this.setBrushStyling();\n  }\n  // dotted brush, glitter brush?\n}\n\nexport default BrushHandler;\n","class ColorHandler {\n  constructor(canvasHandler) {\n    this.setupColorHandling()\n    this.canvasHandler = canvasHandler\n  }\n\n  setupColorHandling() {\n    this.currentColor = \"black\";\n\n    // if a brush color has been selected..\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => {\n        const drawnPaths = this.canvasHandler.drawnPaths\n        const redoStack = this.canvasHandler.redoStack\n        this.canvasHandler.clear()\n        this.canvasHandler.drawnPaths = drawnPaths\n        this.canvasHandler.redoStack = redoStack\n        drawnPaths.forEach((path) => this.canvasHandler.redrawPath(path));\n        this.canvasHandler.canvas.style.backgroundColor = this.bgColorPicker.value;\n      }\n    );\n  }\n}\n\nexport default ColorHandler","class DrawingHandler {\n  constructor(canvasHandler, colorHandler, brushHandler) {\n    this.canvasHandler = canvasHandler;\n    this.canvas = this.canvasHandler.canvas;\n    this.colorHandler = colorHandler;\n    this.brushHandler = brushHandler;\n    this.setupDrawingEventListeners();\n  }\n\n  setupDrawingEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  // // drawing actions\n  startDrawing(e) {\n    if (!this.isDrawing) {\n      // clear the stacks when a new drawing begins\n      this.currentPath = [];\n      this.redoStack = [];\n      this.isDrawing = true;\n    }\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvas.offsetTop;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.canvasHandler.ctx.beginPath();\n\n    // move the brush to the adjusted mouse coordinates\n    this.canvasHandler.ctx.moveTo(canvasMouseX, canvasMouseY);\n\n    // store the starting point in the drawing path\n    this.currentPath.push({\n      x: canvasMouseX,\n      y: canvasMouseY,\n      color: this.colorHandler.currentColor,\n      brushSize: this.brushHandler.currentBrushSize,\n    });\n\n    // draw a dot at the starting point\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.canvasHandler.ctx.lineTo(mouseX, mouseY);\n\n    // Set brush styling based on whether eraser or brush is checked\n    const color = this.canvasHandler.eraserCheckbox.checked\n      ? this.colorHandler.bgColorPicker.value\n      : this.colorHandler.currentColor;\n\n    this.brushHandler.setBrushStyling(\n      color,\n      this.brushHandler.currentBrushSize\n    );\n\n    // draw the line on the canvas\n    this.canvasHandler.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({\n      x: mouseX,\n      y: mouseY,\n      color: color,\n      brushSize: this.brushHandler.currentBrushSize,\n    });\n  }\n\n  stopDrawing() {\n    if (this.canvasHandler.eraserCheckbox.checked)\n      this.currentPath.isErase = true;\n    if (this.isDrawing) {\n      this.canvasHandler.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n      this.isDrawing = false;\n    }\n  }\n}\n\nexport default DrawingHandler;\n","import BrushHandler from \"./brushHandler\";\nimport ColorHandler from \"./colorHandler\";\nimport DrawingHandler from \"./drawingHandler\";\n\nclass CanvasHandler {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupEraser();\n    this.setupUndoBtn();\n    this.setupRedoBtn();\n    this.setupClearBtn();\n    this.setupDownloadBtn();\n\n    this.colorHandler = new ColorHandler(this);\n    this.brushHandler = new BrushHandler(this, this.colorHandler);\n    this.drawingHandler = new DrawingHandler(\n      this,\n      this.colorHandler,\n      this.brushHandler\n    );\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  setupEraser() {\n    this.eraserCheckbox = document.getElementById(\"eraser\");\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  setupDownloadBtn() {\n    this.downloadBtn = document.getElementById(\"download\");\n    this.downloadBtn.addEventListener(\"click\", () => this.download());\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.drawingHandler.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n\n        // set brush styling based on point clr & brush size\n        if (path.isErase) point.color = this.colorHandler.bgColorPicker.value;\n        this.brushHandler.setBrushStyling(point.color, point.brushSize);\n\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.drawingHandler.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.drawingHandler.redoStack.pop();\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  download() {\n    // create a temp canvas to preserve the background (wo this the bg would be transparent)\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempCtx = tempCanvas.getContext(\"2d\");\n    tempCanvas.width = this.canvas.width;\n    tempCanvas.height = this.canvas.height;\n\n    // set the background color on the temp canvas\n    tempCtx.fillStyle = this.canvas.style.backgroundColor;\n    tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);\n\n    // draw the existing canvas content on top of the background \n    tempCtx.drawImage(this.canvas, 0, 0);\n\n    // get the data URL of the temp canvas\n    const dataUrl = tempCanvas.toDataURL(\"image/png\");\n\n    // create a link ele for download\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = \"canvas.png\";\n\n    // trigger the download\n    link.click();\n  }\n}\n\nexport default CanvasHandler;\n","class ToolIcon {\n  constructor() {\n    this.brushRadio = document.getElementById(\"brush\");\n    this.eraserRadio = document.getElementById(\"eraser\");\n    this.brushLabel = document.querySelector('label[for=\"brush\"]');\n    this.eraserLabel = document.querySelector('label[for=\"eraser\"]');\n    this.detectChange();\n    this.updateIcon();\n  }\n\n  updateIcon() {\n    // update brush icon based on whether the brush is checked\n    this.brushLabel.querySelector(\"img\").src = this.brushRadio.checked\n      ? \"assets/tab-icon.png\"\n      : \"assets/menu icons/not-active-brush.png\";\n\n    // update eraser icon based on whether the eraser is checked\n    this.eraserLabel.querySelector(\"img\").src = this.eraserRadio.checked\n      ? \"assets/menu icons/active-eraser.png\"\n      : \"assets/menu icons/not-active-eraser.png\";\n  }\n\n  detectChange() {\n    // update icon clr when tool is changed\n    [this.brushRadio, this.eraserRadio].forEach((radio) => {\n      radio.addEventListener(\"change\", () => this.updateIcon());\n    });\n  }\n}\n\nexport default ToolIcon;\n","import CanvasHandler from \"./scripts/canvasHandler\";\nimport ToolIcon from \"./scripts/toolIcon\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new CanvasHandler();\n  new ToolIcon();\n});\n"],"names":["constructor","canvasHandler","colorHandler","this","setupBrushSize","brushSizeInput","document","getElementById","addEventListener","updateBrushSize","currentBrushSize","setBrushStyling","color","arguments","length","undefined","currentColor","brushSize","ctx","lineCap","lineWidth","strokeStyle","parseInt","value","setupColorHandling","brushColorPicker","bgColorPicker","drawnPaths","redoStack","clear","forEach","path","redrawPath","canvas","style","backgroundColor","brushHandler","setupDrawingEventListeners","e","startDrawing","draw","stopDrawing","isDrawing","currentPath","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","beginPath","moveTo","push","x","y","mouseX","mouseY","lineTo","eraserCheckbox","checked","stroke","isErase","setupCanvas","setupCanvasProportions","setupEraser","setupUndoBtn","setupRedoBtn","setupClearBtn","setupDownloadBtn","ColorHandler","BrushHandler","drawingHandler","DrawingHandler","getContext","position","top","topMargin","height","window","innerHeight","width","innerWidth","clearBtn","undoBtn","undo","redoBtn","redo","downloadBtn","download","clearRect","undonePath","pop","point","idx","redonePath","tempCanvas","createElement","tempCtx","fillStyle","fillRect","drawImage","dataUrl","toDataURL","link","href","click","brushRadio","eraserRadio","brushLabel","querySelector","eraserLabel","detectChange","updateIcon","src","radio","CanvasHandler","ToolIcon"],"sourceRoot":""}