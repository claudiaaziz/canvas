{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/canvas.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class Canvas {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupDrawingEventListeners();\n    this.setupColorHandling();\n    this.setupUndoBtn();\n    this.setupRedoBtn();\n    this.setupClearBtn();\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupDrawingEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  setupColorHandling() {\n    // if a brush color has been selected..\n    this.colorBtns = document.querySelectorAll(\".color-btn\");\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n\n    this.colorBtns.forEach((colorbtn) => {\n      colorbtn.addEventListener(\"click\", () => {\n        this.currentColor = colorbtn.style.backgroundColor;\n      });\n    });\n\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => (this.canvas.style.backgroundColor = this.bgColorPicker.value)\n    );\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  // drawing actions\n  startDrawing(e) {\n    // clear the stacks when a new drawing begins\n    if (!this.isDrawing) {\n      this.currentPath = [];\n      this.redoStack = [];\n    }\n\n    this.isDrawing = true;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.ctx.beginPath();\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvas.offsetTop;\n\n    // move the brush to the adjusted mouse coordinates\n    this.ctx.moveTo(canvasMouseX, canvasMouseY);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.ctx.lineTo(mouseX, mouseY);\n\n    this.setBrushStyling();\n\n    // draw the line on the canvas\n    this.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({ x: mouseX, y: mouseY, color: this.currentColor });\n  }\n\n  stopDrawing() {\n    if (this.isDrawing) {\n      this.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n      this.isDrawing = false;\n    }\n  }\n\n  setBrushStyling(color = this.currentColor) {\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineWidth = 5;\n    this.ctx.strokeStyle = color;\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path, isUndo = true) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n\n        // set brush styling color based on whether it's an undo or not\n        this.setBrushStyling(isUndo ? point.color : this.currentColor);\n\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.redoStack.pop();\n\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default Canvas;\n","import Canvas from \"./scripts/canvas\";\nimport Brush from \"./scripts/brush\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Canvas();\n});\n\n\n"],"names":["constructor","this","setupCanvas","setupCanvasProportions","setupDrawingEventListeners","setupColorHandling","setupUndoBtn","setupRedoBtn","setupClearBtn","canvas","document","getElementById","ctx","getContext","isDrawing","style","position","top","topMargin","height","window","innerHeight","width","innerWidth","addEventListener","e","startDrawing","draw","stopDrawing","colorBtns","querySelectorAll","brushColorPicker","forEach","colorbtn","currentColor","backgroundColor","value","bgColorPicker","drawnPaths","undoBtn","undo","redoStack","redoBtn","redo","clearBtn","clear","currentPath","beginPath","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","moveTo","mouseX","mouseY","lineTo","setBrushStyling","stroke","push","x","y","color","arguments","length","undefined","lineCap","lineWidth","strokeStyle","clearRect","undonePath","pop","path","redrawPath","isUndo","point","idx","redonePath","Canvas"],"sourceRoot":""}