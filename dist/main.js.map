{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/color_handler.js","webpack://canvas-project/./src/scripts/drawing_handler.js","webpack://canvas-project/./src/scripts/undo_handler.js","webpack://canvas-project/./src/scripts/canvas.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class ColorHandler {\n  constructor(canvas, drawingHandler) {\n    this.canvas = canvas;\n    this.drawingHandler = drawingHandler;\n    this.colorButtons = document.querySelectorAll(\".colorButton\");\n    this.colorInput = document.getElementById(\"color-picker\");\n    this.currentColor = \"black\";\n  }\n\n  setupColorHandeling() {\n    // if a color has been selected..\n    this.colorButtons = document.querySelectorAll(\".colorButton\");\n    this.colorInput = document.getElementById(\"color-picker\");\n\n    this.colorButtons.forEach((button) => {\n      button.addEventListener(\"click\", () => {\n        this.currentColor = button.style.backgroundColor;\n      });\n    });\n\n    this.colorInput.addEventListener(\"input\", (e) => {\n      this.currentColor = e.target.value;\n    });\n  }\n}\n\nexport default ColorHandler;","class DrawingHandler {\n  constructor(canvas, ctx, colorHandler) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.colorHandler = colorHandler\n    this.isDrawing = false;\n    this.currentPath = [];\n    this.drawnPaths = [];\n  }\n\n  startDrawing(e) {\n    // clear the stack when a new drawing begins\n    if (!this.isDrawing) {\n      this.currentPath = [];\n    }\n\n    this.isDrawing = true;\n    this.ctx.beginPath();\n    this.ctx.moveTo(\n      e.clientX - this.canvas.offsetLeft,\n      e.clientY - this.canvas.offsetTop\n    );\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    const x = e.clientX - this.canvas.offsetLeft;\n    const y = e.clientY - this.canvas.offsetTop;\n\n    this.ctx.lineTo(x, y);\n\n    // styling\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineWidth = 5;\n    this.ctx.strokeStyle = this.colorHandler.currentColor;\n\n    this.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({ x, y, color: this.colorHandler.currentColor });\n  }\n\n  stopDrawing() {\n    // save the current path to the stack\n    if (this.isDrawing) this.drawnPaths.push(this.currentPath);\n    this.isDrawing = false;\n  }\n}\n\nexport default DrawingHandler;\n","class UndoHandler {\n  constructor(ctx, drawingHandler, colorHandler) {\n    this.ctx = ctx;\n    this.drawingHandler = drawingHandler;\n    this.colorHandler = colorHandler;\n    this.undoBtn = document.getElementById(\"undo\");\n    this.drawnPaths = [];\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  undo() {\n    if (this.drawnPaths.length > 0) {\n      // remove the last drawn path from the stack\n      this.drawnPaths.pop();\n\n      // // clear the canvas first\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // then redraw the remaining paths\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default UndoHandler;\n","import ColorHandler from \"./color_handler\";\nimport DrawingHandler from \"./drawing_handler\";\nimport UndoHandler from \"./undo_handler\";\n\nclass Canvas {\n  constructor() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.setupCanvas();\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n\n    this.colorHandler = new ColorHandler(this.canvas, this.drawingHandler)\n    this.drawingHandler = new DrawingHandler(this.canvas, this.ctx, this.colorHandler)\n    this.undoHandler = new UndoHandler(this.ctx, this.drawingHandler, this.colorHandler)\n    this.setupEventListeners()\n\n    this.backgroundInput = document.getElementById(\"background-color-picker\");\n    this.backgroundInput.addEventListener(\"input\", () =>\n      this.changeBackgroundColor()\n    );\n\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  setupCanvas() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", this.drawingHandler.startDrawing.bind(this.drawingHandler));\n    this.canvas.addEventListener(\"mousemove\", this.drawingHandler.draw.bind(this.drawingHandler));\n    this.canvas.addEventListener(\"mouseup\", this.drawingHandler.stopDrawing.bind(this.drawingHandler));\n    this.canvas.addEventListener(\"mouseout\", this.drawingHandler.stopDrawing.bind(this.drawingHandler));\n\n    this.colorHandler.setupColorHandeling()\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n  }\n\n  redrawPath(path) {\n    path.forEach((point, index) => {\n      if (index === 0) {\n        // Move to the starting point of the path\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // Draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n        this.ctx.lineCap = \"round\";\n        this.ctx.lineWidth = 5;\n        this.ctx.strokeStyle = point.color;\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  changeBackgroundColor() {\n    this.canvas.style.backgroundColor = this.backgroundInput.value;\n  }\n}\n\nexport default Canvas;\n","import Canvas from \"./scripts/canvas\";\nimport DrawingHandler from \"./scripts/drawing_handler\";\nimport Brush from \"./scripts/brush\";\nimport ColorHandler from \"./scripts/color_handler\";\nimport UndoHandler from \"./scripts/undo_handler\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new Canvas();\n});\n\n\n"],"names":["constructor","canvas","drawingHandler","this","colorButtons","document","querySelectorAll","colorInput","getElementById","currentColor","setupColorHandeling","forEach","button","addEventListener","style","backgroundColor","e","target","value","ctx","colorHandler","isDrawing","currentPath","drawnPaths","startDrawing","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","draw","x","y","lineTo","lineCap","lineWidth","strokeStyle","stroke","push","color","stopDrawing","undoBtn","undo","length","pop","clearRect","width","height","path","redrawPath","setupCanvas","getContext","ColorHandler","DrawingHandler","undoHandler","UndoHandler","setupEventListeners","backgroundInput","changeBackgroundColor","clearBtn","clear","position","top","topMargin","window","innerHeight","innerWidth","bind","point","index","Canvas"],"sourceRoot":""}