{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/brushHandler.js","webpack://canvas-project/./src/scripts/colorHandler.js","webpack://canvas-project/./src/scripts/drawingHandler.js","webpack://canvas-project/./src/scripts/canvasHandler.js","webpack://canvas-project/./src/scripts/toolIcon.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class BrushHandler {\n  // dotted brush, glitter brush?\n  constructor(canvasHandler, colorHandler) {\n    this.canvasHandler = canvasHandler;\n    this.colorHandler = colorHandler\n    this.setupBrushSize()\n  }\n\n  setupBrushSize() {\n    this.brushSizeInput = document.getElementById(\"size-slider\");\n    this.brushSizeInput.addEventListener(\"input\", () => this.updateBrushSize());\n    this.currentBrushSize = 5;\n  }\n\n  setBrushStyling(\n    color = this.colorHandler.currentColor,\n    brushSize = this.currentBrushSize\n  ) {\n    this.canvasHandler.ctx.lineCap = \"round\";\n    this.canvasHandler.ctx.lineWidth = brushSize;\n    this.canvasHandler.ctx.strokeStyle = color;\n  }\n\n  updateBrushSize() {\n    this.currentBrushSize = parseInt(this.brushSizeInput.value);\n    this.setBrushStyling();\n  }\n}\n\nexport default BrushHandler;\n","class ColorHandler {\n  constructor(canvasHandler) {\n    this.setupColorHandling()\n    this.canvasHandler = canvasHandler\n  }\n\n  setupColorHandling() {\n    this.currentColor = \"black\";\n\n    // if a brush color has been selected..\n    this.colorBtns = document.querySelectorAll(\".color-btn\");\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n\n    this.colorBtns.forEach((colorbtn) => {\n      colorbtn.addEventListener(\"click\", () => {\n        this.currentColor = colorbtn.style.backgroundColor;\n      });\n    });\n\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => {\n        const drawnPaths = this.canvasHandler.drawnPaths\n        const redoStack = this.canvasHandler.redoStack\n        this.canvasHandler.clear()\n        this.canvasHandler.drawnPaths = drawnPaths\n        this.canvasHandler.redoStack = redoStack\n        drawnPaths.forEach((path) => this.canvasHandler.redrawPath(path));\n        this.canvasHandler.canvas.style.backgroundColor = this.bgColorPicker.value;\n      }\n    );\n  }\n}\n\nexport default ColorHandler","class DrawingHandler {\n  constructor(canvasHandler, colorHandler, brushHandler) {\n    this.canvasHandler = canvasHandler\n    this.canvas = this.canvasHandler.canvas\n    this.colorHandler = colorHandler\n    this.brushHandler = brushHandler\n    this.setupDrawingEventListeners()\n  }\n\n  setupDrawingEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  // // drawing actions\n  startDrawing(e) {\n    if (!this.isDrawing) {\n      // clear the stacks when a new drawing begins\n      this.currentPath = [];\n      this.redoStack = [];\n      this.isDrawing = true;\n    }\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvas.offsetTop;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.canvasHandler.ctx.beginPath();\n\n    // move the brush to the adjusted mouse coordinates\n    this.canvasHandler.ctx.moveTo(canvasMouseX, canvasMouseY);\n\n    // store the starting point in the drawing path\n    this.currentPath.push({\n      x: canvasMouseX,\n      y: canvasMouseY,\n      color: this.colorHandler.currentColor,\n      brushSize: this.brushHandler.currentBrushSize,\n    });\n\n    // draw a dot at the starting point\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.canvasHandler.ctx.lineTo(mouseX, mouseY);\n\n    // Set brush styling based on whether eraser or brush is checked\n    const color = this.canvasHandler.eraserCheckbox.checked\n      ? this.colorHandler.bgColorPicker.value\n      : this.colorHandler.currentColor;\n\n    this.brushHandler.setBrushStyling(color, this.brushHandler.currentBrushSize);\n\n    // draw the line on the canvas\n    this.canvasHandler.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({\n      x: mouseX,\n      y: mouseY,\n      color: color,\n      brushSize: this.brushHandler.currentBrushSize,\n    });\n  }\n\n  stopDrawing() {\n    if (this.canvasHandler.eraserCheckbox.checked) this.currentPath.isErase = true;\n    if (this.isDrawing) {\n      this.canvasHandler.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n      this.isDrawing = false;\n    }\n  }\n}\n\nexport default DrawingHandler","import BrushHandler from \"./brushHandler\";\nimport ColorHandler from \"./colorHandler\";\nimport DrawingHandler from \"./drawingHandler\";\n\nclass CanvasHandler {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupEraser();\n    this.setupUndoBtn();\n    this.setupRedoBtn();\n    this.setupClearBtn();\n\n    this.colorHandler = new ColorHandler(this);\n    this.brushHandler = new BrushHandler(this, this.colorHandler);\n    this.drawingHandler = new DrawingHandler(\n      this,\n      this.colorHandler,\n      this.brushHandler\n    );\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  setupEraser() {\n    this.eraserCheckbox = document.getElementById(\"eraser\");\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.drawingHandler.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.ctx.beginPath();\n        this.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.ctx.lineTo(point.x, point.y);\n\n        // set brush styling based on point clr & brush size\n        if (path.isErase) point.color = this.colorHandler.bgColorPicker.value;\n        this.brushHandler.setBrushStyling(point.color, point.brushSize);\n\n        this.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.drawingHandler.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.drawingHandler.redoStack.pop();\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default CanvasHandler;\n","class ToolIcon {\n  constructor() {\n    this.brushRadio = document.getElementById(\"brush\");\n    this.eraserRadio = document.getElementById(\"eraser\");\n    this.brushLabel = document.querySelector('label[for=\"brush\"]');\n    this.eraserLabel = document.querySelector('label[for=\"eraser\"]');\n    this.detectChange();\n    this.updateIcon();\n  }\n\n  updateIcon() {\n    // update brush icon based on whether the brush is checked\n    this.brushLabel.querySelector(\"img\").src = this.brushRadio.checked\n      ? \"assets/tab-icon.png\"\n      : \"assets/menu icons/not-active-brush.png\";\n\n    // update eraser icon based on whether the eraser is checked\n    this.eraserLabel.querySelector(\"img\").src = this.eraserRadio.checked\n      ? \"assets/menu icons/active-eraser.png\"\n      : \"assets/menu icons/not-active-eraser.png\";\n  }\n\n  detectChange() {\n    // update icon clr when tool is changed\n    [this.brushRadio, this.eraserRadio].forEach((radio) => {\n      radio.addEventListener(\"change\", () => this.updateIcon());\n    });\n  }\n}\n\nexport default ToolIcon;\n","import CanvasHandler from \"./scripts/canvasHandler\";\nimport ToolIcon from \"./scripts/toolIcon\";\nimport BrushHandler from \"./scripts/brushHandler\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new CanvasHandler();\n  new ToolIcon();\n});\n"],"names":["constructor","canvasHandler","colorHandler","this","setupBrushSize","brushSizeInput","document","getElementById","addEventListener","updateBrushSize","currentBrushSize","setBrushStyling","color","arguments","length","undefined","currentColor","brushSize","ctx","lineCap","lineWidth","strokeStyle","parseInt","value","setupColorHandling","colorBtns","querySelectorAll","brushColorPicker","forEach","colorbtn","style","backgroundColor","bgColorPicker","drawnPaths","redoStack","clear","path","redrawPath","canvas","brushHandler","setupDrawingEventListeners","e","startDrawing","draw","stopDrawing","isDrawing","currentPath","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","beginPath","moveTo","push","x","y","mouseX","mouseY","lineTo","eraserCheckbox","checked","stroke","isErase","setupCanvas","setupCanvasProportions","setupEraser","setupUndoBtn","setupRedoBtn","setupClearBtn","ColorHandler","BrushHandler","drawingHandler","DrawingHandler","getContext","position","top","topMargin","height","window","innerHeight","width","innerWidth","clearBtn","undoBtn","undo","redoBtn","redo","clearRect","undonePath","pop","point","idx","redonePath","brushRadio","eraserRadio","brushLabel","querySelector","eraserLabel","detectChange","updateIcon","src","radio","CanvasHandler","ToolIcon"],"sourceRoot":""}