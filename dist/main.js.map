{"version":3,"file":"main.js","mappings":"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","sources":["webpack://canvas-project/./src/scripts/drawingHandler.js","webpack://canvas-project/./src/scripts/colorHandler.js","webpack://canvas-project/./src/scripts/brushHandler.js","webpack://canvas-project/./src/scripts/UndoAndRedoHandler.js","webpack://canvas-project/./src/scripts/downloadHandler.js","webpack://canvas-project/./src/scripts/canvasHandler.js","webpack://canvas-project/./src/scripts/toolIcon.js","webpack://canvas-project/./src/index.js"],"sourcesContent":["class DrawingHandler {\n  constructor(canvasHandler) {\n    this.canvasHandler = canvasHandler;\n    this.setupDrawingEventListeners();\n  }\n\n  setupDrawingEventListeners() {\n    this.canvasHandler.canvas.addEventListener(\"mousedown\", (e) => this.startDrawing(e));\n    this.canvasHandler.canvas.addEventListener(\"mousemove\", (e) => this.draw(e));\n    this.canvasHandler.canvas.addEventListener(\"mouseup\", () => this.stopDrawing());\n    this.canvasHandler.canvas.addEventListener(\"mouseout\", () => this.stopDrawing());\n  }\n\n  // // drawing actions\n  startDrawing(e) {\n    if (!this.isDrawing) {\n      // clear the stacks when a new drawing begins\n      this.currentPath = [];\n      this.redoStack = [];\n      this.isDrawing = true;\n    }\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const canvasMouseX = e.clientX - this.canvasHandler.canvas.offsetLeft;\n    const canvasMouseY = e.clientY - this.canvasHandler.canvas.offsetTop;\n\n    // begin a new path in the canvas ctx & move to initial drawing pos\n    this.canvasHandler.ctx.beginPath();\n\n    // move the brush to the adjusted mouse coordinates\n    this.canvasHandler.ctx.moveTo(canvasMouseX, canvasMouseY);\n\n    // store the starting point in the drawing path\n    this.currentPath.push({\n      x: canvasMouseX,\n      y: canvasMouseY,\n      color: this.canvasHandler.colorHandler.currentColor,\n      brushSize: this.canvasHandler.brushHandler.currentBrushSize,\n    });\n\n    // draw a dot at the starting point\n    this.draw(e);\n  }\n\n  draw(e) {\n    if (!this.isDrawing) return;\n\n    // calculate the adjusted mouse coordinates relative to the canvas\n    const mouseX = e.clientX - this.canvasHandler.canvas.offsetLeft;\n    const mouseY = e.clientY - this.canvasHandler.canvas.offsetTop;\n\n    // connect the current drawing position to the new position\n    this.canvasHandler.ctx.lineTo(mouseX, mouseY);\n\n    // Set brush styling based on whether eraser or brush is checked\n    const color = this.canvasHandler.eraserCheckbox.checked\n      ? this.canvasHandler.colorHandler.bgColorPicker.value\n      : this.canvasHandler.colorHandler.currentColor;\n\n    this.canvasHandler.brushHandler.setBrushStyling(\n      color,\n      this.canvasHandler.brushHandler.currentBrushSize\n    );\n\n    // draw the line on the canvas\n    this.canvasHandler.ctx.stroke();\n\n    // store the current point in the drawing path\n    this.currentPath.push({\n      x: mouseX,\n      y: mouseY,\n      color: color,\n      brushSize: this.canvasHandler.brushHandler.currentBrushSize,\n    });\n  }\n\n  stopDrawing() {\n    if (this.canvasHandler.eraserCheckbox.checked)\n      this.currentPath.isErase = true;\n    if (this.isDrawing) {\n      this.canvasHandler.undoAndRedoHandler.drawnPaths.push(this.currentPath); // if currently drawing, save the current path to the stack (for undo feature)\n      this.isDrawing = false;\n    }\n  }\n}\n\nexport default DrawingHandler;\n","class ColorHandler {\n  constructor(canvasHandler) {\n    this.canvasHandler = canvasHandler\n    this.setupColorHandling()\n  }\n\n  setupColorHandling() {\n    this.currentColor = \"black\";\n\n    // if a brush color has been selected..\n    this.brushColorPicker = document.getElementById(\"color-picker\");\n    this.brushColorPicker.addEventListener(\"input\", () => {\n      this.currentColor = this.brushColorPicker.value;\n    });\n\n    // if a bg color has been selected..\n    this.bgColorPicker = document.getElementById(\"background-color-picker\");\n\n    // for erase action\n    this.bgColorPicker.addEventListener(\n      \"input\",\n      () => {\n        const drawnPaths = this.canvasHandler.undoAndRedoHandler.drawnPaths;\n        const redoStack = this.canvasHandler.undoAndRedoHandler.redoStack;\n        this.canvasHandler.clear()\n        this.canvasHandler.undoAndRedoHandler.drawnPaths = drawnPaths;\n        this.canvasHandler.undoAndRedoHandler.redoStack = redoStack;\n        this.canvasHandler.undoAndRedoHandler.drawnPaths.forEach((path) =>\n          this.canvasHandler.undoAndRedoHandler.redrawPath(path)\n        );\n        this.canvasHandler.canvas.style.backgroundColor = this.bgColorPicker.value;\n      }\n    );\n  }\n}\n\nexport default ColorHandler","class BrushHandler {\n  constructor(canvasHandler) {\n    this.canvasHandler = canvasHandler;\n    this.setupBrushSize();\n  }\n\n  setupBrushSize() {\n    this.brushSizeInput = document.getElementById(\"size-slider\");\n    this.brushSizeInput.addEventListener(\"input\", () => this.updateBrushSize());\n    this.currentBrushSize = 5;\n  }\n\n  setBrushStyling(\n    color = this.canvasHandler.colorHandler.currentColor,\n    brushSize = this.currentBrushSize\n  ) {\n    this.canvasHandler.ctx.lineCap = \"round\";\n    this.canvasHandler.ctx.lineWidth = brushSize;\n    this.canvasHandler.ctx.strokeStyle = color;\n  }\n\n  updateBrushSize() {\n    this.currentBrushSize = parseInt(this.brushSizeInput.value);\n    this.setBrushStyling();\n  }\n}\n\nexport default BrushHandler;\n","class UndoAndRedoHandler {\n  constructor(canvasHandler) {\n    this.canvasHandler = canvasHandler;\n    this.setupUndoBtn()\n    this.setupRedoBtn()\n  }\n\n  setupUndoBtn() {\n    this.drawnPaths = [];\n    this.undoBtn = document.getElementById(\"undo\");\n    this.undoBtn.addEventListener(\"click\", () => this.undo());\n  }\n\n  setupRedoBtn() {\n    this.redoStack = [];\n    this.redoBtn = document.getElementById(\"redo\");\n    this.redoBtn.addEventListener(\"click\", () => this.redo());\n  }\n\n  undo() {\n    // if there are paths in the stack\n    if (this.drawnPaths.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.canvasHandler.ctx.clearRect(0, 0, this.canvasHandler.canvas.width, this.canvasHandler.canvas.height);\n\n      // remove (undo) last drawn path from the stack\n      const undonePath = this.drawnPaths.pop();\n      // push the undone path to redo stack\n      this.redoStack.push(undonePath);\n\n      // redraw all paths that are still in the stack\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n\n  redrawPath(path) {\n    path.forEach((point, idx) => {\n      // if it's the starting point of the path\n      if (idx === 0) {\n        // move to the starting point\n        this.canvasHandler.ctx.beginPath();\n        this.canvasHandler.ctx.moveTo(point.x, point.y);\n      } else {\n        // draw a line to the next point\n        this.canvasHandler.ctx.lineTo(point.x, point.y);\n\n        // set brush styling based on point clr & brush size\n        if (path.isErase) point.color = this.canvasHandler.colorHandler.bgColorPicker.value;\n        this.canvasHandler.brushHandler.setBrushStyling(point.color, point.brushSize);\n\n        this.canvasHandler.ctx.stroke();\n      }\n    });\n  }\n\n  redo() {\n    // if there are paths in the redo stack\n    if (this.redoStack.length > 0) {\n      // clear canvas (to prep for redraw)\n      this.canvasHandler.ctx.clearRect(0, 0, this.canvasHandler.canvas.width, this.canvasHandler.canvas.height);\n\n      // remove (redo) last undone path from the redo stack\n      const redonePath = this.redoStack.pop();\n      // push the redone path to drawnPaths stack\n      this.drawnPaths.push(redonePath);\n\n      // redraw all paths with the correct color\n      this.drawnPaths.forEach((path) => this.redrawPath(path));\n    }\n  }\n}\n\nexport default UndoAndRedoHandler;\n","class DownloadHandler {\n  constructor(canvasHandler) {\n    this.canvasHandler = canvasHandler;\n    this.setupDownloadBtn()\n  }\n\n  setupDownloadBtn() {\n    this.downloadBtn = document.getElementById(\"download\");\n    this.downloadBtn.addEventListener(\"click\", () => this.download());\n  }\n\n  download() {\n    // create a temp canvas to preserve the background (wo this the bg would be transparent)\n    const tempCanvas = document.createElement(\"canvas\");\n    const tempCtx = tempCanvas.getContext(\"2d\");\n    tempCanvas.width = this.canvasHandler.canvas.width;\n    tempCanvas.height = this.canvasHandler.canvas.height;\n\n    // set the background color on the temp canvas\n    tempCtx.fillStyle = this.canvasHandler.canvas.style.backgroundColor;\n    tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);\n\n    // draw the existing canvas content on top of the background\n    tempCtx.drawImage(this.canvasHandler.canvas, 0, 0);\n\n    // get the data URL of the temp canvas\n    const dataUrl = tempCanvas.toDataURL(\"image/png\");\n\n    // create a link ele for download\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = \"canvas.png\";\n\n    // trigger the download\n    link.click();\n  }\n}\n\nexport default DownloadHandler;","import DrawingHandler from \"./drawingHandler\";\nimport ColorHandler from \"./colorHandler\";\nimport BrushHandler from \"./brushHandler\";\nimport UndoAndRedoHandler from \"./UndoAndRedoHandler\";\nimport DownloadHandler from \"./downloadHandler\";\n\nclass CanvasHandler {\n  constructor() {\n    this.setupCanvas();\n    this.setupCanvasProportions();\n    this.setupEraser();\n    this.setupClearBtn();\n\n    this.drawingHandler = new DrawingHandler(this);\n    this.colorHandler = new ColorHandler(this);\n    this.brushHandler = new BrushHandler(this);\n    this.undoAndRedoHandler = new UndoAndRedoHandler(this);\n    this.downloadHandler = new DownloadHandler(this);\n  }\n\n  // setting up the canvas\n  setupCanvas() {\n    this.canvas = document.getElementById(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.isDrawing = false;\n  }\n\n  setupCanvasProportions() {\n    const topMargin = 100;\n    const bottomMargin = 100;\n\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.top = topMargin + \"px\";\n\n    this.canvas.height = window.innerHeight - topMargin - bottomMargin;\n    this.canvas.width = window.innerWidth;\n  }\n\n  setupClearBtn() {\n    this.clearBtn = document.getElementById(\"clear\");\n    this.clearBtn.addEventListener(\"click\", () => this.clear());\n  }\n\n  setupEraser() {\n    this.eraserCheckbox = document.getElementById(\"eraser\");\n  }\n\n  // btn actions\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.style.backgroundColor = \"white\";\n    this.redoStack = [];\n    this.drawnPaths = [];\n  }\n}\n\nexport default CanvasHandler;\n","class ToolIcon {\n  constructor() {\n    this.brushRadio = document.getElementById(\"brush\");\n    this.eraserRadio = document.getElementById(\"eraser\");\n    this.brushLabel = document.querySelector('label[for=\"brush\"]');\n    this.eraserLabel = document.querySelector('label[for=\"eraser\"]');\n    this.detectChange();\n    this.updateIcon();\n  }\n\n  updateIcon() {\n    // update brush icon based on whether the brush is checked\n    this.brushLabel.querySelector(\"img\").src = this.brushRadio.checked\n      ? \"assets/tab-icon.png\"\n      : \"assets/menu icons/not-active-brush.png\";\n\n    // update eraser icon based on whether the eraser is checked\n    this.eraserLabel.querySelector(\"img\").src = this.eraserRadio.checked\n      ? \"assets/menu icons/active-eraser.png\"\n      : \"assets/menu icons/not-active-eraser.png\";\n  }\n\n  detectChange() {\n    // update icon clr when tool is changed\n    [this.brushRadio, this.eraserRadio].forEach((radio) => {\n      radio.addEventListener(\"change\", () => this.updateIcon());\n    });\n  }\n}\n\nexport default ToolIcon;\n","import CanvasHandler from \"./scripts/canvasHandler\";\nimport ToolIcon from \"./scripts/toolIcon\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new CanvasHandler();\n  new ToolIcon();\n});\n\n\n\n\n\n\n\n\n"],"names":["constructor","canvasHandler","this","setupDrawingEventListeners","canvas","addEventListener","e","startDrawing","draw","stopDrawing","isDrawing","currentPath","redoStack","canvasMouseX","clientX","offsetLeft","canvasMouseY","clientY","offsetTop","ctx","beginPath","moveTo","push","x","y","color","colorHandler","currentColor","brushSize","brushHandler","currentBrushSize","mouseX","mouseY","lineTo","eraserCheckbox","checked","bgColorPicker","value","setBrushStyling","stroke","isErase","undoAndRedoHandler","drawnPaths","setupColorHandling","brushColorPicker","document","getElementById","clear","forEach","path","redrawPath","style","backgroundColor","setupBrushSize","brushSizeInput","updateBrushSize","arguments","length","undefined","lineCap","lineWidth","strokeStyle","parseInt","setupUndoBtn","setupRedoBtn","undoBtn","undo","redoBtn","redo","clearRect","width","height","undonePath","pop","point","idx","redonePath","setupDownloadBtn","downloadBtn","download","tempCanvas","createElement","tempCtx","getContext","fillStyle","fillRect","drawImage","dataUrl","toDataURL","link","href","click","setupCanvas","setupCanvasProportions","setupEraser","setupClearBtn","drawingHandler","DrawingHandler","ColorHandler","BrushHandler","UndoAndRedoHandler","downloadHandler","DownloadHandler","position","top","topMargin","window","innerHeight","innerWidth","clearBtn","brushRadio","eraserRadio","brushLabel","querySelector","eraserLabel","detectChange","updateIcon","src","radio","CanvasHandler","ToolIcon"],"sourceRoot":""}